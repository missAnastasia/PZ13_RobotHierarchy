Вариант 1

1. Что такое класс?

Класс - абстрактное описание какого-либо объекта; пользовательский тип данных.

Общий вид:
    модификатор_доступа(package-private, public) [abstract] [final] class Имя_Класса { ... }

Классы содержат поля и методы. Поля метода представляют собой переменные ссылочных или примитивных типов. Методы выполняют действия
с полями, задавая "поведение" класса.
Поля и методы имеют модификаторы доступа, могут быть static, final. Методы также могут быть synchronized, abstract, native.
Классы, имеющие хотя бы один абстрактный метод, должны быть также абстрактными. Данное свойство используется при настледовании классов для возможности
переобределения методов в классах-наследниках (изменения их реализации).
Классы, объявленные как final, не могут быть унаследованы.
Также существует возможность создания вложенных классов. Такой подход применяется тогда, когда вложенный класс используется только внутри
внешнего класса и не используется другими классами. Такие классы могут иметь помимо public и package-private модификаторов еще и private
и protected.
При объявлении вложенного класса приватным внешний класс не может иметь доступ к методам вложенного класса.

2. Что такое ООП? Опишите основные принципы.

ООП - подход при разработке программ, основанный на использовании понятий абстракции, наследования, инкапсуляции и полиморфизма, которые
являются основными принципами ООП.

Абстракция - описание объекта реального мира путем выявления его наиболее значимых характеристик в рамках решения задачи и игнорирование
остальных незначимых характеристик.

Наследование - возможность одних классов иметь свойства других классов.
Для обеспечения наследования одного класса другим в объявлении класса-наследника необходимо указать ключевое слово extends и
имя класса-предка. В Java нет возможности множественного наследования классов, но поддерживается множественное наследования интерфейсов.

Инкапсуляция - сокрытие реализации. Примером проявления инкапсуляции является использование модификаторов доступа для классов, их методов
и полей, обеспечивающих их различную область видимости.

Полиморфизм - "один интерфейс - несколько реализаций". Примером проявления полиморфизма является переопределение абстрактных методов,
а также перегрузка методов.

3. Как работает LinkedList?

LinkedList - класс, реализующий интерфейс List, и основывающихся на структуре данных "двусвязный список". Каждый элемент хранит в себе
объект какого-либо ссылочного (примитивные не допускаются, их заменяют на соответствующие классы-обертки) типа, сслыки на предыдущий и
следующий элементы списка, что позволяет проходить по нему в обе стороны.
Перебор элементов двусвязного списка осуществляется с помощью итератора.
По сравнению с ArrayList LinkedList целесообразнее использовать в случаях, когда необходимо осуществять большое количество операций
добавления и удаления элементов (в частности при добавлении и удалении элементов по заданному индексу), т.к. для этого необходимо просто поменять ссылки на предыдущий и следующий элементы у элемнтов, между
которыми происходит добавление или удаление. ArrayList основывается на массиве, поэтому такие операции производятся медленнее.
Поиск элементов в LinkedList осуществляется медленнее ,чем в ArrayList.

Основные методы класса LinkedList:
add(Object o);
addAll(Collection <E> o);
contains(Object o);
containsAll(Collection <E> o);
remove(Object o);
removeAll(Collection <E> o);
equals(Collection <E> o);
hashcode();

4. Как и для чего применяется слово "static"?

Ключевое слово static применяется для объявления полей и методов классов для того, чтобы обозначить, что данные поля и методы принадлежат
самому классу, а не его объектам. Т.е. при создании большого количества объектов статическая переменная не создается для кадого из этих
объектов. Статические поля и методы создаются в начале работы программы, а не в том месте, где они вызываются.
К статическим полям и методам обращаются через имя класса, а не имя конкретного объекта этого класса.
Статическими могут быть переменные, методы, блоки кода.